import full_task_bd
from all_kyes import bot, dp, storage
import aiogram.dispatcher.filters
import sqlite3 as sq
from aiogram import Bot, types, Dispatcher
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from bd import *
from full_task_bd import *
from users_bd import *
import requests
from sdamgia import SdamGIA


import random
from timeit import default_timer as timer


sql_start()
ft_sql_start()
start_users_bd()

Count_of_types = 12  #const

# def types_of_ege(Count_of_types):
#     sdamgia = SdamGIA()
#     catalog = sdamgia.get_catalog('math')
#     list_of_types_ege = {}
#     for i in range(Count_of_types+1):
#         list_of_types_ege[catalog[i]['topic_id']] = sdamgia.get_catalog('math')[i]['topic_name']
#     print(list_of_types_ege)
#     return list_of_types_ege
#        #print(sdamgia.get_catalog('math')[i]['topic_name'])
#
# types_of_ege(Count_of_types)




#types_of_ege(Count_of_types)

# sdamgia = SdamGIA()
# list_of_type_ege = {}
# for i in range(Count_of_types):
#     list_of_type_ege[sdamgia.get_catalog('math')[i]['topic_id']] = sdamgia.get_catalog('math')[i]['topic_name']
#
# print(list_of_type_ege)

len_task = 1 #const
correct_answer =['–û—Ç–ª–∏—á–Ω–æ', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ', '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ', '–ú–æ–ª–æ–¥–µ—Ü',
                 '–£–º–Ω–∏—Ü–∞', '–¢–æ—á–Ω–æ', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', '–ó–¥–æ—Ä–æ–≤–æ', '–ë—Ä–∞–≤–æ', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–°—É–ø–µ—Ä', '–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ']

incorrect_feedback_words = ['–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', '–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ', '–ù–µ—É–¥–∞—á–∞', '–û—à–∏–±–æ—á–∫–∞', '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–ù–µ —Ç–æ—á–Ω–æ',
                  '–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ', '–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞',
                  '–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥', '–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è', '–ù–µ–≤–µ—Ä–Ω–æ', '–û—Ç–≤–µ—Ç –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è']


#------------------------------------------------------–ö–ª–∏–µ–Ω—Ç----------------------------------------------------------
@dp.message_handler(commands=['start','help'])
@dp.message_handler(Text(['–ü—Ä–∏–≤–µ—Ç', 'Hi'], ignore_case=True))
async def commands_start(message: types.Message):
    try:
        b1 = KeyboardButton('–ü–æ–≥–Ω–∞–ª–∏')
        start_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_kb.add(b1)
        start_ib = InlineKeyboardMarkup().add(
             InlineKeyboardButton(f'–ü–æ–≥–Ω–∞–ª–∏', callback_data=f'–ü–æ–≥–Ω–∞–ª–∏'))
        await bot.send_message(message.from_user.id, 'ü§ñ', reply_markup=start_kb)
        await bot.send_photo(message.from_user.id,  photo=types.InputFile('photo/hi_bot.jpg'),
                                          caption= f"–ü—Ä–∏–≤–µ—Ç, "
                                                     f"@{message.from_user.first_name}"
                                                     f", –º–µ–Ω—è –∑–æ–≤—É—Ç –ì–∏—Ä–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ "
                                                     f"—ç–∫–∑–∞–º–µ–Ω—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, –ø–æ–≥–Ω–∞–ª–∏!?",
                                                     reply_markup=InlineKeyboardMarkup().add(
                                                     InlineKeyboardButton(f'–ü–æ–≥–Ω–∞–ª–∏', callback_data=f'–ü–æ–≥–Ω–∞–ª–∏')))
    except:
        await bot.send_message(message.from_user.id, '–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°')


@dp.message_handler(commands=['menu'])
@dp.callback_query_handler(Text(['–ü–æ–≥–Ω–∞–ª–∏', '–ú–µ–Ω—é', 'Back_to_menu']))
@dp.message_handler(Text(['–ü–æ–≥–Ω–∞–ª–∏', '–ú–µ–Ω—é', '–ù–∞–∑–∞–¥'], ignore_case=True))
async def bot_go(message: types.Message):
    #await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
    await bot.send_message(message.from_user.id, 'ü§ñ', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,
                                                                one_time_keyboard=True).add(KeyboardButton(f'–ü–µ—Ä–≤—ã–π '
                                                                                                         f'—Ä–µ–∂–∏–º'),
                                                                                             KeyboardButton(f'–í—Ç–æ—Ä–æ–π '
                                                                                                            f'—Ä–µ–∂–∏–º'),
                                                                                             KeyboardButton(f'–¢—Ä–µ—Ç–∏–π '
                                                                                                            f'—Ä–µ–∂–∏–º')))
    await bot.send_photo(message.from_user.id, photo=types.InputFile('photo/bot_go.jpg'), caption='–£ —Ç–µ–±—è –Ω–∞ –≤—ã–±–æ—Ä '
                                                                                                 '–µ—Å—Ç—å 3 —Ä–µ–∂–∏–º–∞: \n'
                                                               '1. –ù–∞ –≤—Ä–µ–º—è - —Ç—É—Ç —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–µ—à–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å—é '
                                                               '–ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ï–ì–≠ –ø–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –Ω–∞ –≤—Ä–µ–º—è \n'
                                                               '2. –†–µ—à–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø\n'
                                                               '3. –¢–µ—Å—Ç –æ—Ç '
                                                               '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
                         reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(f'1',
                                                                                      callback_data='First_mode'),
                                                                 InlineKeyboardButton(f'2',
                                                                                      callback_data='Second_mode'),
                                                                 InlineKeyboardButton(f'3',
                                                                                      callback_data='Third_mode')))


#---------------------–ü–µ—Ä–≤—ã–π —Ä–µ–∂–∏–º---------------------
class FSMfirst_mode(StatesGroup):
    Answer = State()
@dp.message_handler(commands=['First_mode'])
@dp.callback_query_handler(Text(['First_mode', '–ü–µ—Ä–≤—ã–π —Ä–µ–∂–∏–º']))
@dp.message_handler(Text('–ü–µ—Ä–≤—ã–π —Ä–µ–∂–∏–º', ignore_case=True))
async def First_mode_game(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, 'ü§ñ',
                           reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                               KeyboardButton(f'–°—Ç–∞—Ä—Ç'), KeyboardButton('–ù–∞–∑–∞–¥')))
    await bot.send_message(callback_query.from_user.id,f'–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –Ω–∞ –≤–µ—Ä–º—è —Ä–µ—à–∏—Ç—å {Count_of_types} –∑–∞–¥–∞—á –∏–∑ '
                                                       f'–ï–ì–≠ –ø–æ '
                                           '–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –Ω–∞ –≤—Ä–µ–º—è, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –∫–∞–∫ –º–æ–∂–Ω–æ '
                                           '–±—ã—Å—Ç—Ä–µ–µ. –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n '
                                           '–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–º–∂–∏ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç',
                           reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(f'–°—Ç–∞—Ä—Ç',
                                                                                        callback_data='Start_first_mode'),
                                                                   InlineKeyboardButton(f'–ù–∞–∑–∞–¥',
                                                                                        callback_data='Back_to_menu')
                                                                   ))

#len_task
count_of_true_answers = 0
numb_of_type = 1
flag_to_timer = 0
@dp.message_handler(commands=['Start_first_mode'])
@dp.callback_query_handler(Text('Start_first_mode'))
@dp.message_handler(Text('–°—Ç–∞—Ä—Ç', ignore_case=True))
async def First_mode_game_start(message: types.Message):
    global numb_of_type, true_answer, count_of_true_answers, flag_to_timer, start
    if flag_to_timer == 0:
        start = timer()
    if numb_of_type <= Count_of_types:
        flag_to_timer += 1
        true_answer = await first_mode_type_exercise(message, numb_of_type)
        await FSMfirst_mode.Answer.set()
        numb_of_type += 1
    else:
        end = timer()
        all_time = round(float(end - start), 2)
        await bot.send_message(message.from_user.id, f"–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª, —É —Ç–µ–±—è {count_of_true_answers} "
                                                     f"–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {Count_of_types}.\n–¢—ã –∑–∞—Ç—Ä–∞—Ç–∏–ª "
                                                     f"{time_result(all_time)}.\n\n"
                                                     f"–£–∑–Ω–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - /result \n"
                                                     f"–•–æ—á–µ—à—å –µ—â—ë –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è?", reply_markup=InlineKeyboardMarkup(

        ).row(InlineKeyboardButton('–ü–æ–≥–Ω–∞–ª–∏!', callback_data='First_mode'),
                                                                   InlineKeyboardButton(f'–ù–∞–∑–∞–¥',
                                                                                        callback_data='Back_to_menu')))
        user_id = message.from_user.id
        await add_user(user_id, time_result(all_time), count_of_true_answers, Count_of_types)
        numb_of_type = 1
        count_of_true_answers = 0
        flag_to_timer = 0


@dp.message_handler(state=FSMfirst_mode)
async def load_answer_first_game_mode(message: types.Message, state: FSMContext):
    global count_of_true_answers
    answer = message.text
    if answer == true_answer:
        count_of_true_answers += 1
        await bot.send_message(message.from_user.id, 'üëè')
        await bot.send_message(message.from_user.id, text=random.choice(correct_answer))#, f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ'
    else:
        await bot.send_message(message.from_user.id, 'üòî')
        await bot.send_message(message.from_user.id, text=random.choice(incorrect_feedback_words))
    await state.finish()
    await First_mode_game_start(message)






#-----------------------------------------------------------–í—Ç–æ—Ä–æ–π —Ä–µ–∂–∏–º ---------------------------------------------

class FSMsecond_mode(StatesGroup):
    Type_of_task = State()
    Answer = State()
@dp.message_handler(commands=['Second_mode'])
@dp.callback_query_handler(Text(['Second_mode', '–í—Ç–æ—Ä–æ–π —Ä–µ–∂–∏–º']))
@dp.message_handler(Text('–í—Ç–æ—Ä–æ–π —Ä–µ–∂–∏–º', ignore_case=True))
async def Second_mode_game(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, 'ü§ñ',
                           reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                               KeyboardButton(f'–ì–æ—Ç–æ–≤'), KeyboardButton('–ù–∞–∑–∞–¥')))
    await bot.send_message(callback_query.from_user.id,f'–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, '
                                                       f'–∏ —Ä–µ—à–∞—Ç—å –∏—Ö –ø–æ–∫–∞ —Å–∞–º –Ω–µ –∑–∞—Ö–æ—á–µ—à—å –∑–∞–∫–æ–Ω—á–∏—Ç—å',
                           reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton(f'–ì–æ—Ç–æ–≤',
                                                                                        callback_data='Start_second_mode'),
                                                                   InlineKeyboardButton(f'–ú–µ–Ω—é',
                                                                                        callback_data='Back_to_menu')
                                                                   ))


@dp.message_handler(commands=['Start_second_mode'])
@dp.callback_query_handler(Text('Start_second_mode'))
@dp.message_handler(Text('–ì–æ—Ç–æ–≤', ignore_case=True))
async def Second_mode_type(message: types.Message):
    global Trys, Count_true_ans_second_mode
    Trys = 0
    Count_true_ans_second_mode = 0

    #–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∏–ø–∞–º–∏
    list_of_type_ege = types_of_ege(Count_of_types)
    message_with_types = ''
    for key, value in list_of_type_ege.items():
        message_with_types += f'{key}. {value}\n'

    #–î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    buttons = []
    for option in list_of_type_ege.keys():
        buttons.append(KeyboardButton(option))
    #print(buttons)
    await bot.send_message(message.from_user.id, f'–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—à—å —Ä–µ—à–∞—Ç—å?\n\n{message_with_types}',
                           reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
                               *buttons))
    await FSMsecond_mode.Type_of_task.set()

# @dp.message_handler(commands=['Start_second_mode'])
# @dp.callback_query_handler(Text('Start_second_mode'))
# @dp.message_handler(Text('–ì–æ—Ç–æ–≤', ignore_case=True))
# async def Second_mode_type(message: types.Message):
#     global Trys, Count_true_ans_second_mode
#     Trys = 0
#     Count_true_ans_second_mode = 0
#     await bot.send_message(message.from_user.id, '–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—à—å —Ä–µ—à–∞—Ç—å?',
#                            reply_markup=ReplyKeyboardRemove())
#     await FSMsecond_mode.Type_of_task.set()

@dp.message_handler(state=FSMsecond_mode.Type_of_task)
async def load_type_second_game_mode(message: types.Message, state: FSMContext):
    global answer_type
    answer_type = message.text
    #print(answer_type)
    if answer_type.isdigit() and int(answer_type) <= Count_of_types and int(answer_type) != 0:
        await Send_task_second_mode(message)
    else:
        await bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                               reply_markup=ReplyKeyboardRemove())
        await state.finish()

async def Send_task_second_mode(message: types.Message):
    global true_answer_second_mode
    true_answer_second_mode = await second_mode_type_exercise(message, answer_type)
    await FSMsecond_mode.Answer.set()


@dp.message_handler(state=FSMsecond_mode.Answer)
async def Check_answer_second_mode(message: types.Message, state: FSMContext):
    global count_of_true_answers, true_answer_second_mode, Trys, Count_true_ans_second_mode
    answer = message.text
    if answer == '–ó–∞–∫–æ–Ω—á–∏—Ç—å':
        if Trys > 0:
            await bot.send_message(message.from_user.id,
                                   f'–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —Ö–æ—Ä–æ—à–æ –ø–æ–∑–∞–Ω–∏–º–∞–ª—Å—è. \n–£ —Ç–µ–±—è {Count_true_ans_second_mode} '
                                   f'–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {Trys}', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True).add('–ú–µ–Ω—é'))
        else:
            await bot.send_message(message.from_user.id, '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True).add('–ú–µ–Ω—é'))
        await state.finish()
    else:
        Trys += 1
        if answer == true_answer_second_mode:
            Count_true_ans_second_mode += 1
            await bot.send_message(message.from_user.id, 'üëè')
            await bot.send_message(message.from_user.id, text=random.choice(correct_answer))#, f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ'
        else:
            await bot.send_message(message.from_user.id, 'üòî')
            await bot.send_message(message.from_user.id, f'{random.choice(incorrect_feedback_words)} \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π '
                                                         f'–û—Ç–≤–µ—Ç: {true_answer_second_mode}')
        await Send_task_second_mode(message)



#---------------------–¢—Ä–µ—Ç–∏–π —Ä–µ–∂–∏–º---------------------
number_of_attempts = 0
Attempts = 2
lst_of_user_task = []
class FSMthird_mode(StatesGroup):
    Answer = State()
@dp.message_handler(commands=['Third_mode'])
@dp.callback_query_handler(Text(['Third_mode', '–¢—Ä–µ—Ç–∏–π —Ä–µ–∂–∏–º']))
@dp.message_handler(Text(['–¢—Ä–µ—Ç–∏–π —Ä–µ–∂–∏–º', '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑'], ignore_case=True))
async def Third_mode_game(callback_query: types.CallbackQuery):
    count_of_true_answers = 0
    if check_full_task() == False:
        await bot.send_message(callback_query.from_user.id, '–¢–µ—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç')
    elif lst_of_user_task.count(f'{callback_query.from_user.id}') >= Attempts:
        await bot.send_message(callback_query.from_user.id, '–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏')
    else:
        await bot.send_message(callback_query.from_user.id, 'ü§ñ',
                               reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
                                   KeyboardButton(f'–ù–∞—á–∞—Ç—å'), KeyboardButton('–ù–∞–∑–∞–¥')))
        await bot.send_message(callback_query.from_user.id, f'–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –Ω–∞ –≤–µ—Ä–º—è —Ä–µ—à–∏—Ç—å {len_task} '
                                                            f'–∑–∞–¥–∞—á –∏–∑ —Ç–µ—Å—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–≤–æ–∏–º –ø—Ä–µ–ø–∞–¥–æ–≤–∞—Ç–µ–ª–µ–º,'
                                                            f'—É —Ç–µ–±—è –≤—Å–µ–≥–æ '
                                                            f'{Attempts - lst_of_user_task.count(f"{callback_query.from_user.id}")}'
                                                            f' –ø–æ–ø—ã—Ç–∫–∞(–∏) —É–¥–∞—á–∏!',
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'–°—Ç–∞—Ä—Ç',
                                                                                            callback_data='Start_third_mode'),
                                                                       InlineKeyboardButton(f'–ù–∞–∑–∞–¥',
                                                                                            callback_data='Back_to_menu')))

@dp.message_handler(commands=['Start_third_mode'])
@dp.callback_query_handler(Text('Start_third_mode'))
@dp.message_handler(Text('–ù–∞—á–∞—Ç—å', ignore_case=True))
async def third_mode_game_start(message: types.Message):
    global numb_of_type, true_answer, count_of_true_answers, flag_to_timer, start, number_of_attempts
    if flag_to_timer == 0:
        start = timer()
    if numb_of_type <= len_task and lst_of_user_task.count(f'{message.from_user.id}') < Attempts:
        flag_to_timer += 1
        true_answer = await third_mode_type_exercise(message, numb_of_type)
        await FSMthird_mode.Answer.set()
        numb_of_type += 1
    elif lst_of_user_task.count(f'{message.from_user.id}') >= Attempts:#number_of_attempts >= Attempts or
        await bot.send_message(message.from_user.id, '–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫(')
    else:
        end = timer()
        all_time = round(float(end - start), 2)
        number_of_attempts += 1
        lst_of_user_task.append(str(message.from_user.id))

        if lst_of_user_task.count(f'{message.from_user.id}') < Attempts:
            await bot.send_message(message.from_user.id, '‚úÖ', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True).add('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑'))
            await bot.send_message(message.from_user.id, f"–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª, —É —Ç–µ–±—è {count_of_true_answers} "
                                                         f"–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len_task}.\n–¢—ã –∑–∞—Ç—Ä–∞—Ç–∏–ª "
                                                         f"{time_result(all_time)}",
                                   reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ '
                                                                                                '—Ä–∞–∑', callback_data='Start_third_mode')))#,
            # reply_markup=ReplyKeyboardRemove()
        else:
            await bot.send_message(message.from_user.id, '‚úÖ', reply_markup=ReplyKeyboardMarkup(
                resize_keyboard=True).add('–ú–µ–Ω—é'))
            await bot.send_message(message.from_user.id, f"–¢—ã –∑–∞–∫–æ–Ω—á–∏–ª, —É —Ç–µ–±—è {count_of_true_answers} "
                                                         f"–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {len_task}.\n–¢—ã –∑–∞—Ç—Ä–∞—Ç–∏–ª "
                                                         f"{time_result(all_time)}",
                                   reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–ú–µ–Ω—é',
                                                                                                callback_data='Back_to_menu')))
        numb_of_type = 1
        count_of_true_answers = 0
        flag_to_timer = 0



@dp.message_handler(state=FSMthird_mode)
async def load_answer_first_game_mode(message: types.Message, state: FSMContext):
    global count_of_true_answers
    answer = message.text
    if answer == true_answer:
        count_of_true_answers += 1
        await bot.send_message(message.from_user.id, 'üëè')
        await bot.send_message(message.from_user.id, text=random.choice(correct_answer))#, f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ'
    else:
        await bot.send_message(message.from_user.id, 'üòî')
        await bot.send_message(message.from_user.id, text=random.choice(incorrect_feedback_words))
    await state.finish()
    await third_mode_game_start(message)



#-------------–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã-----------------
@dp.message_handler(commands=['result'])
async def result(message: types.Message):
    result = await check_result(message, message.from_user.id)
    string_result = ''
    numb_of_result = 1
    if result:
        for ret in result:
            string_result += f'{numb_of_result}. {ret[3]}/{ret[-1]}  |  ({ret[2]}) \n'
            numb_of_result += 1
        await bot.send_message(message.from_user.id, string_result)
    else:
        await bot.send_message(message.from_user.id, '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')

@dp.message_handler(commands=['check_all_users'])
async def name_users(message: types.Message):
    if message.from_user.id == ID or message.from_user.id == 1143118992:
        users = await check_name_users()
        users = '\n'.join(users)
        await bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n{users}')

@dp.message_handler(commands='check_users')
async def count_users(message: types.Message):
    if message.from_user.id == ID or message.from_user.id == 1143118992:
        users = await check_name_users()
        await bot.send_message(message.from_user.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {len(users)}')



# if check_result(message, message.from_user.id):
#     await check_result(message, message.from_user.id)
# else:
#     await bot.send_message(message.from_user.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
#-------------------------–ê–¥–º–∏–Ω-----------------------------
ID = None

button_load = KeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å')
button_delete = KeyboardButton('–£–¥–∞–ª–∏—Ç—å')
button_all = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è')
button_all_with_type = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É')
button_change_count_type = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á')
button_full_test = KeyboardButton('–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç')
button_check_full_test = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç')
button_del_full_test = KeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç')
button_case_admin = ReplyKeyboardMarkup(resize_keyboard=True).row(button_load, button_delete) \
    .add(button_all).add(button_all_with_type).add(button_change_count_type).add(button_full_test).add(
    button_check_full_test).add(button_del_full_test)

class FSMadmin(StatesGroup):
    type = State()
    photo = State()
    answer = State()
@dp.message_handler(commands=['moderator'], is_chat_admin = True)
#@dp.message_handler(commands=['moderator'])  #–∏—Å–ø—Ä–∞–≤–∏—Ç—å
async def make_change_commands(message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_photo(message.from_user.id,photo=types.InputFile('photo/bot_bd.jpg'), caption='–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å '
                                                                                                '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å '
                                                                         '–±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!', reply_markup=button_case_admin)
    await message.delete()

@dp.message_handler(Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å', ignore_case=True), state=None)
@dp.message_handler(commands='–ó–∞–≥—Ä—É–∑–∏—Ç—å', state=None)
async def cm_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMadmin.type.set()
        await message.reply('–í–≤–µ–¥–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–µ', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,
                                                                                  one_time_keyboard = True).add(
            KeyboardButton('–û—Ç–º–µ–Ω–∞')))

#–û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message_handler(commands='–æ—Ç–º–µ–Ω–∞', state='*')
@dp.callback_query_handler(Text('cancel'))
@dp.message_handler(Text('–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')#, state='*'
async def cansel_handler(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Ok', reply_markup=button_case_admin)


#–õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–Ω–æ—Å–∏–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state=FSMadmin.type)
async def load_photo(message : types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
    await FSMadmin.next()
    #await message.reply('–í–≤–µ–¥–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–µ')
    await message.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,
                                                                                  one_time_keyboard = True).add(
            KeyboardButton('–û—Ç–º–µ–Ω–∞')))

# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
@dp.message_handler(content_types=['photo'], state=FSMadmin.photo)
async def load_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await FSMadmin.next()
    await message.reply('–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,
                                                                                  one_time_keyboard = True).add(
            KeyboardButton('–û—Ç–º–µ–Ω–∞')))

@dp.message_handler(state=FSMadmin.answer)
async def load_answer(message: types.Message, state : FSMContext):
    async with state.proxy() as data:
        data['answer'] = message.text
    await sql_add_command(state)
    await bot.send_message(message.from_user.id, text='–ì–æ—Ç–æ–≤–æ', reply_markup=button_case_admin)
    # async with state.proxy() as data:
    #     await message.reply(str(data))
    await state.finish()


#–£–¥–∞–ª–∏—Ç—å
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
    await sql_delete_command(base, cur, callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'–ì–æ—Ç–æ–≤–æ', show_alert=True)

#---------------------–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ---------------------
class Delete_question(StatesGroup):
    Answer = State()
@dp.message_handler(commands='Delete')
@dp.message_handler(Text('–£–¥–∞–ª–∏—Ç—å', ignore_case=True))
async def delete_item(message: types.Message):
    if message.from_user.id == ID:
        await bot.send_message(message.from_user.id, '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É?',
                               reply_markup=InlineKeyboardMarkup().row(
                 InlineKeyboardButton(f'–í—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', callback_data=f'all_sql_to_del'),
                 InlineKeyboardButton(f'–ü–æ —Ç–∏–ø—É', callback_data=f'type_sql_to_del')))

@dp.callback_query_handler(Text('all_sql_to_del'))
async def all_sql_to_del(callback_query: types.CallbackQuery):
    read = await sql_read()
    for ret in read:
        await bot.send_photo(callback_query.from_user.id, ret[1], f'–¢–∏–ø: {ret[2]}\n–û—Ç–≤–µ—Ç: {ret[-1]}',
                             reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å', callback_data=f'del {ret[0]}')))
        await bot.send_message(callback_query.from_user.id, '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ')
        # await bot.send_photo(callback_query.from_user.id, ret[1], f'–¢–∏–ø: {ret[2]}\n–û—Ç–≤–µ—Ç: {ret[-1]}')
        # await bot.send_message(callback_query.from_user.id, text='^^^', reply_markup=InlineKeyboardMarkup().add(
        #     InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å', callback_data=f'del {ret[0]}')))

@dp.callback_query_handler(Text('type_sql_to_del'))
async def what_type_to_del(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–≤–µ—Å—Ç–∏?')
    await Delete_question.Answer.set()

#–û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text('–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cansel_handler(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Ok')

@dp.message_handler(state=Delete_question.Answer)
async def state_ask(message: types.Message, state: FSMContext):
    data = message.text
    read = await sql_read_with_type(data)
    for ret in read:
        await bot.send_photo(message.from_user.id, ret[1], f'–¢–∏–ø: {ret[2]}\n–û—Ç–≤–µ—Ç: {ret[-1]}',
                             reply_markup=InlineKeyboardMarkup().add(
                                 InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å', callback_data=f'del {ret[0]}')))
        await bot.send_message(message.from_user.id, '‚ûñ‚ûñ‚ûñ‚ûñ')
    await state.finish()



#---------------------–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π---------------------
@dp.message_handler(Text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è', ignore_case=True))
@dp.message_handler(commands=['Check_all_tasks'])
async def check_type_of_task(message: types.Message):
    await sql_check_all(message)


class State_to_type(StatesGroup):
    Answer = State()
@dp.message_handler(Text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É', ignore_case=True))
@dp.message_handler(commands=['Check_all_task_with_type'])
async def cmd_start(message: types.Message):
    await bot.send_message(message.from_user.id, '–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–≤–µ—Å—Ç–∏?')
    await State_to_type.Answer.set()

#–û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text('–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cansel_handler(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Ok')

@dp.message_handler(state=State_to_type.Answer)
async def state_ask(message: types.Message, state: FSMContext):
    answer = message.text
    await sql_check_all_task_with_type(message, answer)
    await state.finish()


#---------------------–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤---------------------
class State_to_count_of_type_answer(StatesGroup):
    Answer = State()
@dp.message_handler(Text('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á', ignore_case=True))
@dp.message_handler(commands=['Change_count_of_types'])
async def change_count_of_types(message: types.Message):
    await bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π —É –Ω–∞—Å –±—É–¥–µ—Ç?')
    await State_to_count_of_type_answer.Answer.set()

#–û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text('–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cansel_handler(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Ok')

@dp.message_handler(state=State_to_count_of_type_answer.Answer)
async def change_count_of_types_ask(message: types.Message, state: FSMContext):
    global Count_of_types
    answer = message.text
    if answer.isdigit() and int(answer) <= all_types_of_ege():
        Count_of_types = int(answer)
        await bot.send_message(message.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å {Count_of_types} —Ç–∏–ø–æ–≤(–∞) –∑–∞–¥–∞–Ω–∏–π')
    else:
        await bot.send_message(message.from_user.id, f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π')
    await state.finish()

#---------------------–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç---------------------
@dp.message_handler(Text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç'))
@dp.message_handler(commands=['check_full_test'])
async def check_full_test(message: types.Message):
    await sql_check_all_fulltask(message)

#---------------------–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç---------------------
class FSMfull_test(StatesGroup):
    Len_of_task = State()
    Attempts = State()
    Photo = State()
    Answer = State()
@dp.message_handler(Text(equals='–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç', ignore_case=True))
@dp.message_handler(commands=['Create_full_test'])
async def len_full_test(message: types.Message):
    await bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –±—É–¥–µ—Ç –≤ —Ç–≤–æ—ë–º —Ç–µ—Å—Ç–µ?')
    await clean_fulltask()
    await FSMfull_test.Len_of_task.set()

#–û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text('–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cansel_handler(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Ok')

@dp.message_handler(state=FSMfull_test.Len_of_task)
async def process_len_task(message: types.Message, state: FSMContext):
    global len_task, count_of_task
    count_of_task = 0
    len_task = int(message.text)
    if len_task <= 0:
        await bot.send_message(message.from_user.id,f'–¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ {len_task} –∑–∞–¥–∞–Ω–∏–π')
        await state.finish()
    else:
        #await state.finish()
        await FSMadmin.next()
        await bot.send_message(message.from_user.id,'–°–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –±—É–¥–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞')
        await FSMfull_test.Attempts.set()

@dp.message_handler(state=FSMfull_test.Attempts)
async def process_len_task(message: types.Message, state: FSMContext):
    global Attempts
    Attempts = int(message.text)
    #print(Attempts)
    if Attempts <= 0:
        await bot.send_message(message.from_user.id,f'–í —Ç–µ—Å—Ç–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å {Attempts} –ø–æ–ø—ã—Ç–æ–∫')
        await state.finish()
        number_of_attempts = 0
    else:
    #await state.finish()
        await process_len_task(message)

@dp.message_handler(Text('', ignore_case=True), state='*')
async def process_len_task(message: types.Message):
    global number_of_attempts, lst_of_user_task
    if count_of_task < len_task:
        await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–Ω–∫—É —Å –∑–∞–¥–∞–Ω–∏–µ–º')
        await FSMfull_test.Photo.set()
    else:
        await bot.send_message(message.from_user.id, f'–í–∞—Ä–∏–∞–Ω—Ç –∏–∑ {len_task} –∑–∞–¥–∞–Ω–∏–π —Å–æ—Ç–∞–≤–ª–µ–Ω!')
        number_of_attempts = 0
        lst_of_user_task = []

#–û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text('–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cansel_handler(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Ok')

@dp.message_handler(content_types=['photo'], state=FSMfull_test.Photo)
async def load_photo_to_full_task(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await FSMadmin.next()
    await message.reply('–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç')
    await FSMfull_test.Answer.set()

@dp.message_handler(state=FSMfull_test.Answer)
async def load_answer_to_full_task(message: types.Message, state: FSMContext):
    global count_of_task
    async with state.proxy() as data:
        data['Answer'] = message.text
    await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ')
    await sql_add_command_fulltask(state)
    await state.finish()
    count_of_task += 1
    await process_len_task(message)


#---------------------–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç---------------------
@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç', ignore_case=True))
@dp.message_handler(commands=['Del_all_tasks'])
async def check_type_of_task(message: types.Message):
    await clean_fulltask()
    await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ')

#--------------------------------------------------------------------------------------------------

#-------------------------–ü—Ä–æ—á–µ–µ-----------------------------

#–ü–µ—Ä–µ–≤–æ–¥ float –≤–æ –≤—Ä–µ–º—è
def time_result(k):
    hour = k // 3600 #hour
    k -= hour * 3600
    minut = int(k // 60) #minutes
    k -= 60*minut
    # second = round(float(k),2) #seconds
    second = int(k) #second
    return f'{str(minut)} –º–∏–Ω, {str(second)} —Å–µ–∫'

# def types_of_ege():
#     url = 'https://ege.sdamgia.ru/newapi/general'
#     headers = {
#         'User-Agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, '
#                       'like Gecko) Chrome/114.0.0.0Mobile Safari/537.36',
#         'Accept - Ranges': 'bytes'
#     }
#     list_of_types_ege = {}
#     response = requests.get(url, headers=headers).json()
#     for data in response['constructor']:
#         if data['type'] == 'short':
#             list_of_types_ege[data['num']] = data['title']
#     return list_of_types_ege


def types_of_ege(Count_of_types, catalog_cache=None):
    if catalog_cache is None:
        sdamgia = SdamGIA()
        catalog = sdamgia.get_catalog('math')
    else:
        catalog = catalog_cache
    list_of_types_ege = {}
    for i in range(Count_of_types):
        list_of_types_ege[catalog[i]['topic_id']] = catalog[i]['topic_name']
    #print(list_of_types_ege)
    return list_of_types_ege

def all_types_of_ege(catalog_cache=None):
    if catalog_cache is None:
        sdamgia = SdamGIA()
        catalog = sdamgia.get_catalog('math')
    else:
        catalog = catalog_cache
    count_of_all_types = 0
    while catalog[count_of_all_types]['topic_id'].isdigit():
        #print(catalog[count_of_all_types])
        count_of_all_types += 1
    return count_of_all_types




@dp.message_handler()
async def echosend(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏')

executor.start_polling(dp, skip_updates=True)
